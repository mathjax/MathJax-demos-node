#! /usr/bin/env -S node -r esm

/*************************************************************************
 *
 *  speech/mml2mml
 *
 *  Uses MathJax v3 to convert a MathML string to a MathML string with alttext.
 *
 * ----------------------------------------------------------------------
 *
 *  Copyright (c) 2019 The MathJax Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */


//
//  Get the command-line arguments
//
var argv = require('yargs')
    .demand(0).strict()
    .usage('$0 [options] "math" > file.html')
    .options({
        inline: {
            boolean: true,
            describe: "process as inline math"
        },
        sre: {
            array: true,
            nargs: 2,
            describe: 'SRE flags as key value pairs, e.g., "--sre locale de --sre domain clearspeak" generates speech in German with clearspeak rules'
        },
        speech: {
            default: 'shallow',
            describe: 'level of speech: deep, shallow, none'
        },
        dist: {
            boolean: true,
            default: false,
            describe: 'true to use webpacked version, false to use mathjax3 source files'
        }
    })
    .argv;

const action = require('./action.js');

//
// Add a render action to move the computed speech into the alttext attribute.
//
function moveSpeech(math) {
  let alttext = '';
  math.root.walkTree(node => {
    const attributes = node.attributes.getAllAttributes();
    if (!alttext && attributes['data-semantic-speech']) {
      alttext = attributes['data-semantic-speech'];
    }
    delete attributes['data-semantic-speech'];
  });
  math.root.attributes.getAllAttributes()['alttext'] = alttext;
};

action.speechAction.alttext = [
  99,
  (doc) => {
    for (const math of doc.math) {
      moveSpeech(math);
    }
  },
  (math, doc) => {
    moveSpeech(math);
  }
];

//
//  Configure MathJax
//
MathJax = {
    loader: {
        paths: {mathjax: 'mathjax-full/es5'},
        source: (argv.dist ? {} : require('mathjax-full/components/src/source.js').source),
        require: require,
        load: ['input/mml', 'adaptors/liteDOM', 'a11y/semantic-enrich']
    },
    options: {
        sre: {speech: argv.speech},
        renderActions: action.speechAction
    }
};

//
//  Load the MathJax startup module
//
require('mathjax-full/' + (argv.dist ? 'es5' : 'components/src/startup') + '/startup.js');

//
// Filling the sre options from command line
//
action.sreconfig(argv.sre);

//
//  Wait for MathJax to start up, and then typeset the math
//
MathJax.startup.promise.then(() => {
    MathJax.mathml2mmlPromise(argv._[0] || '', {
        display: !argv.inline,
        em: argv.em,
        ex: argv.ex,
        containerWidth: argv.width
    }).then(mml => console.log(mml));
}).catch(err => console.log(err));
