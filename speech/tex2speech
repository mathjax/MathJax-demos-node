#! /usr/bin/env -S node -r esm

/*************************************************************************
 *
 *  speech/tex2speech
 *
 *  Uses MathJax v3 to convert a TeX string to a MathML string with speech.
 *
 * ----------------------------------------------------------------------
 *
 *  Copyright (c) 2019 The MathJax Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */


//
//  Load the packages needed for MathJax
//
const {mathjax} = require('mathjax-full/js/mathjax.js');
const {TeX} = require('mathjax-full/js/input/tex.js');
const {Sre} = require('mathjax-full/js/a11y/sre.js');
const {liteAdaptor} = require('mathjax-full/js/adaptors/liteAdaptor.js');
const {RegisterHTMLHandler} = require('mathjax-full/js/handlers/html.js');
const {SerializedMmlVisitor} = require('mathjax-full/js/core/MmlTree/SerializedMmlVisitor.js');


//
//  The default TeX packages to use
//
const PACKAGES = 'base, autoload, require, ams, newcommand';


//
//  Get the command-line arguments
//
var argv = require('yargs')
    .demand(0).strict()
    .usage('$0 [options] "math" > file.txt')
    .options({
        inline: {
            boolean: true,
            describe: "process as inline math; generally not relevant"
        },
        packages: {
            default: PACKAGES,
            describe: 'the packages to use, e.g. "base, ams"; use "*" to represent the default packages, e.g, "*, bbox"'
        },
        sre: {
            array: true,
            nargs: 2,
            describe: "SRE flags as key value pairs"
        },
        dist: {
            boolean: true,
            default: false,
            describe: 'true to use webpacked version, false to use mathjax3 source files'
        }
    })
    .argv;

const action = require('./action.js');

//
//  Create DOM adaptor and register it for HTML documents
//
const adaptor = liteAdaptor();
const handler = RegisterHTMLHandler(adaptor);

//
//  Create input jax only and a document
//
const tex = new TeX({packages: argv.packages.split(/\s*,\s*/)});
const html = mathjax.document('', {InputJax: tex});

//
//  Typeset the math from the command line
//
const node = html.convert(argv._[0] || '', {
  display: !argv.inline,
  em: argv.em,
  ex: argv.ex,
  containerWidth: argv.width
});

//
//  Create a visitor to serialize the node to Mml.
//
const visitor = new SerializedMmlVisitor();
const mml = visitor.visitTree(node, html);

//
//  Get feature vector for SRE setup. If necessary, compute the path to the
//  locale JSON files explicitly.
//
const feature = action.dataPairs(argv.sre);
feature.json = feature.json ? feature.json :
  require.resolve('mathjax-full/es5/sre/mathmaps/base.json').replace(/\/base\.json$/, '');

//
//  Run SRE, by first setting it up and then compute the speech string.
//
//  Note, that after setting up the engine, we need to wait for it to be ready,
//  so it has finished loading its rule files.
//
Sre.setupEngine(feature)
  .then(() => Sre.sreReady())
  .then(() => console.log(Sre.toSpeech(mml)))
  .catch(err => console.log(err));
